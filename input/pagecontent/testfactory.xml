<?xml version="1.0" encoding="UTF-8"?>
<div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir ../../input-cache/schemas/R5/fhir-single.xsd">
  
  <p>
    The IG publisher can generate a set of resources in a test data directory from a spreadsheet.
    The factory is controlled by an ini file that sets up the parameters for the factory.
  </p>

<pre>
[factory]
profile={url}
liquid={template-file}
data={data-file}
format=json | xml
filename={filename}
mode=bundle | instance
output={test-folder}

[table]
name=file
</pre>

<p>
where:
</p>
<ul>
<li>You nominate either profile, or a liquid template</li>
<li><b>profile url</b>: the URL of a profile to use as the template for generating the instance</li>
<li><b>template-file</b>: a relative path to a liquid template that uses <a href="https://confluence.hl7.org/display/FHIR/FHIR+Liquid+Profile">the
  FHIR variant of the basic liquid syntax</a>, which uses FHIRPath for expressions</li>
<li><b>data-file</b>: A relative path to a CSV or excel file containing the data, where the first row contains the names of the columns</li>
<li><b>data-mapping</b> <i>(optional)</i>: A json file describing how the data file maps into the generated instances (see below)</li>
<li><b>filename</b>: A script that controls the name of the output file </li>
<li><b>test-folder</b>: the folder where the output will be created</li>
</ul>

<p>
The publisher reads the data, and then what happens depends on the mode.
</p>

<a name="liquid"> </a>
<h4>Liquid Templates</h4>
<p>
A liquid template is conceptually simple: a liquid template that constructs an instance of a resource from a set of data. 
The author provides the template, and the data generation is predictable - just based on what the template and the data source provide.
E.g. the data source as a set of columns and the liquid template refers to the columns, laying them out in the resource.
</p>

<a name="liquid"> </a>
<h4>Profile Based Generation</h4>
<p>
Profile based generation works differently - there is no script laying out the content. Instead, the instances are generated 
using random data based on the defined profile, including fixed values and pattern values. In addition, data may be included
from a csv or excel table that provides data to use to inject in the resources at the appropriate locations. 
See <a href="#DataMapping"> below</a>.
</p>

<a name="processing"> </a>
<h4>Processing rules</h4>

<p>
The spreadsheet should not contain any names containing spaces, or '-'. Also, the sheet cannot contain a column named 'counter'.
Or else a data mapping file must be used (see below).
</p>
<p>
For a liquid template, the template does not need to get the commas correct in json - the json is reprocessed once the liquid script is complete 
to fix up the commas. (it must produce valid <a href="https://json5.org">json5</a> output)
</p>

<a name="bundle"> </a>
<h4>Bundle Mode</h4>

<p>
The liquid template is passed once, and the property <code>rows</code> contains the row data.
Once the liquid template has been run, the output is stored in the named file. 
</p>

<a name="instance"> </a>
<h4>Instance Mode</h4>

<p>
The liquid template is processed once for each row. The available properties are those found in the spreadsheet. 
Once the liquid template has been run, the output is stored in the file as named by the name property, which can also use liquid tags for columns in the data. 
</p>

<a name="data"> </a>
<h4>Data Lookup</h4>
<p>
The <code>[tables]</code> section contains a list of named files. 
The data in the files will be available in the liquid template using 
<code>[name].cell(row, col)</code> where:
</p>

<ul>
<li><code>[name]</code> is the name in the ini file</li>
<li>the file contains data in csv format</li>
<li><code>cell(row,col)</code> gives access to the data. 
 Row is an integer, and column is either an integer or a name</li>
</ul>

</div>
