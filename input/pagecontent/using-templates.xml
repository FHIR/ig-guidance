<div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://hl7.org/fhir ../../input-cache/schemas-r5/fhir-single.xsd">
  <a name="overview"> </a>
  <h3>Overview</h3>
  <p>
    This template uses three primary inputs to determine the rendering of an implementation guide:
  </p>
  <ul>
    <li>the implementation guide resource itself;</li>
    <li>a set of resources that provide the computable description of what systems adhering to the implementation guide are expected to do; and</li>
    <li>a set of additional descriptive pages that provide non-computable guidance to software developers and other users of the implementation guide</li>
  </ul>
  <p>
    The result is a set of HTML pages that, together, provide a human-readable (and navigable) description of the IG's rules and contents.
  </p>
  <p>
    This section of the implementation guide is broken into two sub-sections.  The first describes how to author an implementation guide that leverages one
    of the standard templates.  The second provides a walkthrough of the pages within the rendered implementation guide.
  </p>

  <a name="authoring"> </a>
  <h3>Authoring Templates</h3>
  <p>
    The process of authoring implementation guides is an iterative sequence of steps where artifacts are first created and edited and then the "publication
    " process is run (or the "IG is 'built'") to produce a rendered view of the content as well as a set of feedback on the IG's quality, such as whether
    the artifacts and examples validate correctly, whether links resolve, etc.
  </p>
  <p>
    After reviewing the rendered content and/or quality feedback, the IG author goes back to the editing process until they are comfortable with the
    content, it which point the content generated by the publication process can be distributed or posted for use by the target community.
  </p>

  <h4>Directory Structure (file tree)</h4>
  <p>
    The content used by (and produced by) the publication process is organized into a set of directories.  The template depends on the source content
    being organized into a specific set of source folders.  The temporary work products and final results of the publication process will also be put
    into a standard named set of folders.
  </p>
  <p>
    The base directory structure for the IG publisher before invoking the build to import the standard template will look something like this:
    </p>

<pre>
.
├── LICENSE
├── README.md
├── _genonce.bat
├── _updatePublisher.bat
├── ig.ini
├── input
│   ├── howto.xml
│   ├── ignoreWarnings.txt
│   ├── includes
│   │   └── menu.xml
│   │   ├── ...
│   ├── pagecontent
│   │   ├── index.xml
│   │   ├── guidance.xml
│   │   ├── fhir-artifact.xml
│   │   ├── security.xml
│   │   ├── examples.xml
│   │   ├── downloads.xml
│   └── resources
│       ├── StructureDefinition-123.xml
│       ├── CodeSystem-123.xml
│       ├── CapabilityStatement-123.xml
│       ├── ConceptMap-123.xml
│       ├── OperationDefinition-123.xml
│       ├── SearchParameter-123.xml
│       ├── StructureMap-123.xml
│       └── ValueSet-123.xml
└── input-cache
    ├── schemas-r5
    │   ├── fhir-single.xsd
    │   ├── fhir-xhtml.xsd
    │   ├── xml.xsd
    │   └── xmldsig-core-schema.xsd
    └── txcache
        ├── ...

</pre>

<p>
  The directory structure after invoking the build, importing the standard template, and completing the build will look something like this:
  </p>


<pre>
.
├── LICENSE
├── README.md
├── _genonce.bat
├── _updatePublisher.bat
├── ig.ini
├── input
│   ├── howto.xml
│   ├── ignoreWarnings.txt
│   ├── includes
│   │   └── menu.xml
│   │   ├── ...
│   ├── pagecontent
│   │   ├── index.xml
│   │   ├── guidance.xml
│   │   ├── fhir-artifact.xml
│   │   ├── security.xml
│   │   ├── examples.xml
│   │   ├── downloads.xml
│   └── resources
│       ├── StructureDefinition-123.xml
│       ├── CodeSystem-123.xml
│       ├── CapabilityStatement-123.xml
│       ├── ConceptMap-123.xml
│       ├── OperationDefinition-123.xml
│       ├── SearchParameter-123.xml
│       ├── StructureMap-123.xml
│       └── ValueSet-123.xml
├── input-cache
│    ├── schemas-r5
│    │   ├── fhir-single.xsd
│    │   ├── fhir-xhtml.xsd
│    │   ├── xml.xsd
│    │   └── xmldsig-core-schema.xsd
│    └── txcache
│        ├── ...
│
├── output
│   ├── ImplementationGuide-hl7.fhir.uv.howto.json
│   ├── ImplementationGuide-hl7.fhir.uv.howto.ttl
│   ├── ImplementationGuide-hl7.fhir.uv.howto.xml
│   ├── artifacts.html
│   ├── assets
....
├── publish.sh
├── temp
...
│   └── qa
...
└── template
    ├── README.md
    ├── cache.ini
    ├── config
    │   └── _config.yml
    ├── config.json
    ├── content
    │   ├── assets
    │   │   ├── css
    │   │   │   ├── bootstrap-fhir.css
    │   │   │   ├── ...
    │   │   ├── fonts
    │   │   │   ├── glyphiconshalflings-regular.eot
    │   │   │   ├── ...
    │   │   ├── ico
    │   │   │   ├── apple-touch-icon-114-precomposed.png
    │   │   │   ├── ...
    │   │   ├── images
    │   │   │   ├── fhir-logo-www.png
    │   │   │   ├── ...
    │   │   └── js
    │   │       ├── anchor.min.js
    │   │       ├── ...
    │   └── jquery.js
    ├── includes
    │   ├── fragment-pagebegin.html
    │   ├── ...
    ├── layouts
    │   ├── default.html
    │   ├── fhir-artifact.html
    │   ├──  ...
    ├── onGenerate-ig-updated.xml
    ├── onGenerate-ig-working.1.xml
    ├── onGenerate-ig-working.json
    ├── onGenerate-ig-working.xml
    ├── onLoad-ig-updated.xml
    ├── onLoad-ig-working.json
    ├── onLoad-ig-working.xml
    ├── onLoad-validation-checkPublisher.json
    ├── onLoad-validation.json
    ├── package
    │   └── package.json
    ├── scripts
    │   ├── ant.xml
    │   ├── ...
    └── var
        └── lib
</pre>

  <table class="grid">
    <thead>
      <tr>
        <th>Folder</th>
        <th>Description</th>
      </tr>    
    </thead>
    <tbody>
      <tr>
        <td>[root]</td>
        <td>
          <p>
            The root folder can be anywhere in the user's directory structure.  It does need to be a folder where the user has free permission to create
            and edit files without additional administrative privileges.
          </p>
          <p>
            In addition to containing the folders below, this folder contains a number of files related to the execution of the publication process and
            that support the automated execution of the process on continuous integration build environments.
          </p>
        </td>
      </tr>
      <tr>
        <td>[root]/input</td>
        <td>Folder where all source files are maintained.  This is the only folder that needs to exist for a 'new' project.  The contents of this folder
          should generally be managed under source control.  (E.g. Git)</td>
      </tr>
      <tr>
        <td>[root]/input-cache</td>
        <td>Contains downloaded and/or generated files that are typically retained across multiple runs of the publisher.  Some of the contents of this
          folder will typically also be managed under source control for performance reasons.  (Further discussion below.)</td>
      </tr>
      <tr>
        <td>[root]/output</td>
        <td>This contains the results of the publication process.  The content in this folder is a set of static web pages and other artifacts that are
          intended to be posted/shared with those who need to read/use the implementation guide.</td>
      </tr>
      <tr>
        <td>[root]/temp</td>
        <td>Contains files produced as part of the publication process.  The contents of this folder are wiped and re-generated each time the publication
          process is run.  They are retained after the publication run for diagnostic/debugging purposes in the event of issues with the publication
          process.  However, the content can be freely deleted to make extra space</td>
      </tr>
      <tr>
        <td>[root]/template</td>
        <td>This contains files retrieved from the template repository that determine how source files are modified as part of the publication process
        and what the rendered view of different artifacts will look like, including color scheme , formatting, navigation, etc.  Like the temp folder,
        it is regenerated for each run of the publication process and is only retained for diagnostic/debugging purposes.  It can be deleted to free
        space.</td>
      </tr>
    </tbody>
  </table>
  <p>
    Authors may include additional folders at the root level, but they will be ignored by the publication process.
  </p>

  <a name="root.input"> </a>
  <h5>[root]/input</h5>
  <p>
    The files that define the content of the IG, as well as those that guide the publication process are all found in this folder.  The key contents
    are as follows:
  </p>
    <table class="grid">
    <thead>
      <tr>
        <th>File / Folder</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>[ig-id].[xml | json]</td>
        <td>This is the <a href="todo">Implementation Guide</a> resource.  It defines key resource metadata, including the base table of contents for the IG.  
          Specific requirements for the id and contents of this resource when used with the HL7 template are found <a href="todo">below</a></td>
      </tr>
    </tbody>
    <tbody>
      <tr>
        <td>ignoreWarnings.txt</td>
        <td>This file can be populated with any QA warning and information messages that should be ignored by the publication process.  See
          <a href="todo">QA</a> for more details</td>
      </tr>
    </tbody>
    <tbody>
      <tr>
        <td>[resource folder(s)]</td>
        <td>
          <p>
            There are several folders that can be used to contain resource content.  In some cases, none of the folders will be present (because the
            IG doesn't define any resources).  In other cases, many will be present.  The choice of which folders to use (and what to put in them) is
            driven by author convenience.  Some authors will prefer to shove all resources into the 'resources' folder.  Others will prefer to split
            contents apart based on the type of artifact.  This will be particularly common when different users are expected to maintain different types
            of artifacts.  No checking is done about which artifact types are allowed in each folder.  However, to minimize confusion, only artifacts
            that are 'appropriate' based on the name of the folder should go in that folder.
          </p>
          <p>
            The potential folder names supported by the template are:
          </p>
          <ul>
            <li>capabilities (for CapabilityStatements/Conformance resources)</li>
            <li>examples</li>
            <li>extensions</li>
            <li>models (for logical models)</li>
            <li>operations</li>
            <li>profiles</li>
            <li>resources (for anything/everything)</li>
            <li>vocabulary (for code systems &amp; value sets)</li>
          </ul>
        </td>
      </tr>
      <tr>
        <td>[page folder(s)]</td>
        <td></td>
      </tr>
    </tbody>
  </table>


  <p>
    The contents of the temp and template folder are not described here as only those who author and maintain Implementation Guide templates will need
    to concern themselves with the contents of those locations.  The remaining directories are discussed in more detail below.
  </p>

  <a name="root"> </a>
  <h5>[root]</h5>
  <p>
    This contains several files that drive the publication process.  It may also contain additional files relating to source control or other processes.  
    The files are listed in the order in which they're typically authored/used rather than in alphabetical order.
  </p>
  <table class="grid">
    <thead>
      <tr>
        <th>File</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>ig.ini</td>
        <td>
          <p>This key file has two key parameters:</p>
          <ul>
            <li>"ig" indicates the path to the file containing the implementation guide XML or JSON file.  (Typically this will be in the 'input' folder.)</li>
            <li>"template" specifies the id, URL or local filepath of the <a href="todo">IG template</a> to use as part of the publication process.  The
              'id' approach can only be used if the template is 'trusted' by the IG Publisher and is managed in FHIR.org's continuous integration build
              (CI-build) environment</li>          
          </ul>
        </td>
      </tr>
      <tr>
        <td>_updatePublisher[.bat | .sh]</td>
        <td>This process retrieves the current version of the HL7 IG Publisher.  It must be run before the publication process can be launched.  
          The IG Publisher changes on a regular basis as enhancements are made and bugs are fixed.  A warning will appear in the publication output
          if the version of the publisher used is out of date.  A severely out-of-date publisher may occasionally cause the build process to fail.  
          (So the first step in any publication failure is to make sure you're running with the latest publisher.)</td>
      </tr>
      <tr>
        <td>_genonce[.bat | .sh]</td>
        <td>This initiates the publication process.  Launching the .bat file (Windows) or .sh file (Unix/Mac) will launch HL7's IGPublisher program and
          build/publish the IG one time.</td>
      </tr>
      <tr>
        <td>_gencontinuous[.bat | .sh]</td>
        <td>This initiates the publication process.  Launching the .bat file (Windows) or .sh file (Unix/Mac) will launch HL7's IGPublisher program in
          'continuous' mode.  See <a href="todo">Invoking the IG Publisher</a>.</td>
      </tr>
      <tr>
        <td>package-list.json</td>      
        <td>This file is needed for those projects publishing in HL7's continuous integration environment.  It provides versioning and history information.  
          The contents of the file are defined <a href="todo">here</a>.</td>      
      </tr>
    </tbody>
  </table>
  <p>
    HL7 international and many FHIR.org projects make use of Github as a source control environment.  For those projects, the following additional files
    will likely be in your <code>[root]</code> folder:
  </p>
	<table class="grid">
    <thead>
      <tr>
        <th>File</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>.gitignore</td>
        <td>This identifies files that should not be committed to source control (e.g. the files in the temp and template folders)</td>
      </tr>
      <tr>
        <td>LICENSE</td>
        <td>A standard file used by Github to indicate what open-source license applies to the contents of the repository.  For implementation guides
          published by HL7 International (including accelerator projects such as Da Vinci that use the HL7 ballot process), this must refer to HL7's
          FHIR license and the CC0 license.</td>
      </tr>
      <tr>
        <td>README.md</td>
        <td>This provides a short description of the project for those browsing the Github environment</td>
      </tr>
      <tr>
        <td>.git</td>
        <td>This is a hidden folder containing internal files used to manage the local Git repository and its linkage to the cloud-based repository.</td>
      </tr>
    </tbody>
  </table>


Key files

Resource formats

Page formats

Publisher options

IG Appearance
Generated pages
Profiles
Extensions
Value Sets
Examples and other resoruces

</div>
